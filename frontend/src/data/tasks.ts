import { ProcessingTask } from "@/lib/types";

/**
 * Available image processing tasks with their endpoints
 */
export const processingTasks: ProcessingTask[] = [
  {
    id: "negative",
    name: "Negative",
    description: "Generate the negative (inverse) of an image",
    endpoint: "/api/task/negative",
    category: "basic",
  },
  {
    id: "segment",
    name: "segment",
    description: "get image segmentation",
    endpoint: "/api/task/segment",
    category: "operations",
  },
  {
    id: "rgb-channels",
    name: "RGB Channels",
    description: "Separate the red, green, and blue channels of an image",
    endpoint: "/api/task/rgb-channels",
    category: "channels",
    returnsZip: true,
  },
  {
    id: "grayscale",
    name: "Grayscale",
    description: "Convert an image to grayscale",
    endpoint: "/api/task/grayscale",
    category: "basic",
  },
  {
    id: "hitmiss",
    name: "hitmiss",
    description: "hitmiss operation",
    endpoint: "/api/task/hitmiss",
    category: "operations",
  },
  {
    id: "binary",
    name: "Binary",
    description: "Convert an image to binary",
    endpoint: "/api/task/binary",
    category: "basic",
  },
  {
    id: "shear-vertical",
    name: "Shear Image Vertical",
    description: "Shear image vertical",
    endpoint: "/api/task/shear-image-vertical",
    category: "basic",
  },
  {
    id: "shear-horizontal",
    name: "Shear Image Horizontal",
    description: "Shear image horizontal",
    endpoint: "/api/task/shear-image-horizontal",
    category: "basic",
  },
  {
    id: "blur",
    name: "Gaussian Blur",
    description: "Apply a Gaussian blur to an image",
    endpoint: "/api/task/gaussian",
    category: "enhancements",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 5,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the kernel (must be odd)",
      },
      {
        id: "sigmaX",
        name: "Sigma X",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 10,
        step: 0.1,
        description: "Standard deviation in X direction",
      },
    ],
  },
  {
    id: "sobel",
    name: "Sobel Edge Detection",
    description: "Apply Sobel edge detection to an image",
    endpoint: "/api/task/sobel",
    category: "filters",
    parameters: [
      {
        id: "dx",
        name: "X Derivative",
        type: "number",
        defaultValue: 1,
        min: 0,
        max: 2,
        step: 1,
        description: "Order of derivative in X direction",
      },
      {
        id: "dy",
        name: "Y Derivative",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 2,
        step: 1,
        description: "Order of derivative in Y direction",
      },
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the Sobel kernel",
      },
    ],
  },
  {
    id: "prewitt",
    name: "Prewitt Edge Detection",
    description: "Apply Prewitt edge detection to an image",
    endpoint: "/api/task/prewitt",
    category: "filters",
    parameters: [
      {
        id: "axis",
        name: "Direction",
        type: "select",
        defaultValue: "x",
        options: [
          { value: "x", label: "X direction" },
          { value: "y", label: "Y direction" },
          { value: "both", label: "Both directions" },
        ],
        description: "Direction for edge detection",
      },
    ],
  },
  {
    id: "laplacian-filter",
    name: "Laplacian Edge Detector",
    description: "Apply Laplacian edge detection to an image",
    endpoint: "/api/task/laplacian-filter",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the Laplacian kernel",
      },
      {
        id: "scale",
        name: "Scale",
        type: "number",
        defaultValue: 1,
        min: 0.1,
        max: 10,
        step: 0.1,
        description: "Scale factor for the computed Laplacian values",
      },
    ],
  },

  {
    id: "midpoint-filter",
    name: "midpoint Edge Detector",
    description: "Apply midpoint edge detection to an image",
    endpoint: "/api/task/midpoint-filter",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the midpoint kernel",
      },
    ],
  },
  {
    id: "max-filter",
    name: "max Edge Detector",
    description: "Apply max edge detection to an image",
    endpoint: "/api/task/max-filter",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the midpoint kernel",
      },
    ],
  },
  {
    id: "min-filter",
    name: "min Edge Detector",
    description: "Apply min edge detection to an image",
    endpoint: "/api/task/min-filter",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the midpoint kernel",
      },
    ],
  },
  {
    id: "median-filter",
    name: "median Edge Detector",
    description: "Apply median edge detection to an image",
    endpoint: "/api/task/median-filter",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel Size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the median kernel",
      },
    ],
  },
  {
    id: "log",
    name: "laplacian of gaussian",
    description: "Apply mlaplacian of gaussian to an image",
    endpoint: "/api/task/log",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel_size",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 31,
        step: 2,
        description: "Size of the median kernel",
      },
      {
        id: "sigma",
        name: "sigma",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 10,
        step: 0.01,
        description: "Standard deviation direction",
      },
    ],
  },
  {
    id: "highpass",
    name: "high pass filter",
    description: "Apply highpass filter to an image",
    endpoint: "/api/task/highpass",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel_size",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 31,
        step: 2,
        description: "Size of the median kernel",
      },
    ],
  },
  {
    id: "lowpass",
    name: "lowpass pass filter",
    description: "Apply lowpass filter to an image",
    endpoint: "/api/task/lowpass",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel_size",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 31,
        step: 2,
        description: "Size of the median kernel",
      },
    ],
  },
  {
    id: "highboost",
    name: "highboost filter",
    description: "Apply highboost filter to an image",
    endpoint: "/api/task/highboost",
    category: "filters",
    parameters: [
      {
        id: "ksize",
        name: "Kernel_size",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 31,
        step: 2,
        description: "Size of the highboost kernel",
      },
      {
        id: "boost_factor",
        name: "boost_factor",
        type: "number",
        defaultValue: 1,
        min: 1,
        max: 10,
        step: 0.01,
        description: "Standard deviation direction",
      },
    ],
  },
  {
    id: "rayleigh",
    name: "rayleigh noise",
    description: "Apply rayleigh noise to an image",
    endpoint: "/api/task/noise/rayleigh",
    category: "enhancements",
    parameters: [
      {
        id: "scale",
        name: "scale",
        type: "number",
        defaultValue: 10,
        min: 10,
        max: 50,
        step: 1,
        description: "scale",
      },
    ],
  },
  {
    id: "powerlaw",
    name: "power law transformation",
    description: "Apply powerlaw transformation to an image",
    endpoint: "/api/task/power-law",
    category: "operations",
    parameters: [
      {
        id: "gamma",
        name: "gamma value",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 0.01,
        description: "gamma value for the powerlaw",
      },
    ],
  },
  {
    id: "rotate",
    name: "rotate image",
    description: "rotate an image",
    endpoint: "/api/task/rotate",
    category: "basic",
    parameters: [
      {
        id: "angle",
        name: "angle",
        type: "number",
        defaultValue: 0,
        min: -360,
        max: 360,
        step: 1,
        description: "left or right rotate an image",
      },
    ],
  },
  {
    id: "translate",
    name: "translate image",
    description: "translate an image",
    endpoint: "/api/task/translate",
    category: "basic",
    parameters: [
      {
        id: "tx",
        name: "translate-X",
        type: "number",
        defaultValue: 0,
        min: -180,
        max: 180,
        step: 1,
        description: "translate x-direction",
      },
      {
        id: "ty",
        name: "translate-Y",
        type: "number",
        defaultValue: 0,
        min: -180,
        max: 180,
        step: 1,
        description: "translate y-direction",
      },
    ],
  },

  {
    id: "scale",
    name: "scale an image",
    description: "scale an image",
    endpoint: "/api/task/scale",
    category: "basic",
    parameters: [
      {
        id: "fx",
        name: "fx",
        type: "number",
        defaultValue: 1,
        min: 1,
        max: 10,
        step: 0.1,
        description: "size in x direction",
      },
      {
        id: "fy",
        name: "fy",
        type: "number",
        defaultValue: 1,
        min: 1,
        max: 10,
        step: 0.1,
        description: "size in y direction",
      },
    ],
  },
  {
    id: "gaussian-noise",
    name: "gaussian noise to image",
    description: "add gaussian noise to image",
    endpoint: "/api/task/noise/gaussian",
    category: "enhancements",
    parameters: [
      {
        id: "mean",
        name: "mean",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 50,
        step: 0.01,
        description: "enter mean",
      },
      {
        id: "std",
        name: "std",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 30,
        step: 0.01,
        description: "size in y direction",
      },
    ],
  },

  {
    id: "closing",
    name: "closing Detector",
    description: "closing operation to an image",
    endpoint: "/api/task/closing",
    category: "operations",
    parameters: [
      {
        id: "ksize",
        name: "kernel_size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the kernel",
      },
    ],
  },
  {
    id: "opening",
    name: "opening Detector",
    description: "opening operation to an image",
    endpoint: "/api/task/opening",
    category: "operations",
    parameters: [
      {
        id: "ksize",
        name: "kernel_size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the kernel",
      },
    ],
  },
  {
    id: "dilation",
    name: "dilation Detector",
    description: "dilation operation to an image",
    endpoint: "/api/task/dilation",
    category: "operations",
    parameters: [
      {
        id: "ksize",
        name: "kernel_size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the kernel",
      },
      {
        id: "iterations",
        name: "iterations",
        type: "number",
        defaultValue: 1,
        min: 1,
        max: 10,
        step: 1,
        description: "Size of the kernel",
      },
    ],
  },
  {
    id: "erosion",
    name: "erosion",
    description: "erosion operation to an image",
    endpoint: "/api/task/erosion",
    category: "operations",
    parameters: [
      {
        id: "ksize",
        name: "kernel_size",
        type: "number",
        defaultValue: 3,
        min: 1,
        max: 31,
        step: 2,
        description: "Size of the kernel",
      },
      {
        id: "iterations",
        name: "iterations",
        type: "number",
        defaultValue: 1,
        min: 1,
        max: 10,
        step: 1,
        description: "Size of the kernel",
      },
    ],
  },
  {
    id: "canny",
    name: "canny edge detector",
    description: "canny operation to an image",
    endpoint: "/api/task/canny",
    category: "operations",
    parameters: [
      {
        id: "threshold1",
        name: "threshold1",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 255,
        step: 1,
        description: "threshold 1",
      },
      {
        id: "threshold2",
        name: "threshold2",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 255,
        step: 1,
        description: "threshold 2",
      },
    ],
  },
  {
    id: "harris",
    name: "harris edge detector",
    description: "harris operation to an image",
    endpoint: "/api/task/harris",
    category: "operations",
    parameters: [
      {
        id: "block size",
        name: "block_size",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 255,
        step: 2,
        description: "threshold 1",
      },
      {
        id: "ksize",
        name: "ksize",
        type: "number",
        defaultValue: 3,
        min: 3,
        max: 31,
        step: 2,
        description: "kernal size",
      },
      {
        id: "threshold",
        name: "threshold",
        type: "number",
        defaultValue: 0.01,
        min: 0.01,
        max: 0.2,
        step: 0.01,
        description: "threshold",
      },
    ],
  },

  {
    id: "hough_circles",
    name: "Hough Circle Detection",
    description: "Detect circles in an image using Hough Transform",
    endpoint: "/api/task/hough-circles",
    category: "operations",
    parameters: [
      {
        id: "dp",
        name: "dp",
        type: "number",
        defaultValue: 1.0,
        min: 1.0,
        max: 3.0,
        step: 0.1,
        description:
          "Inverse ratio of accumulator resolution to image resolution",
      },
      {
        id: "min_dist",
        name: "min_dist",
        type: "number",
        defaultValue: 20,
        min: 1,
        max: 500,
        step: 1,
        description: "Minimum distance between the centers of detected circles",
      },
      {
        id: "param1",
        name: "param1",
        type: "number",
        defaultValue: 100,
        min: 1,
        max: 500,
        step: 1,
        description: "Higher threshold for Canny edge detector",
      },
      {
        id: "param2",
        name: "param2",
        type: "number",
        defaultValue: 30,
        min: 1,
        max: 150,
        step: 1,
        description: "Accumulator threshold for circle detection",
      },
      {
        id: "min_radius",
        name: "min_radius",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 1000,
        step: 1,
        description: "Minimum circle radius to detect",
      },
      {
        id: "max_radius",
        name: "max_radius",
        type: "number",
        defaultValue: 0,
        min: 0,
        max: 1000,
        step: 1,
        description: "Maximum circle radius to detect",
      },
    ],
  },

  {
    id: "hough_lines",
    name: "Hough Line Detection",
    description: "Detect lines in an image using Hough Transform",
    endpoint: "/api/task/hough-lines",
    category: "operations",
    parameters: [
      {
        id: "rho",
        name: "rho",
        type: "number",
        defaultValue: 1.0,
        min: 0.1,
        max: 10.0,
        step: 0.1,
        description: "Distance resolution of the accumulator in pixels",
      },
      {
        id: "theta",
        name: "theta",
        type: "number",
        defaultValue: 1,
        min: 0.1,
        max: 180,
        step: 0.1,
        description: "Angle resolution of the accumulator in degrees",
      },
      {
        id: "threshold",
        name: "threshold",
        type: "number",
        defaultValue: 100,
        min: 1,
        max: 500,
        step: 1,
        description:
          "Accumulator threshold – minimum number of intersections to detect a line",
      },
    ],
  },
];

/**
 * Get tasks organized by categories
 */
export const getTasksByCategory = () => {
  const categorized: Record<string, ProcessingTask[]> = {};

  processingTasks.forEach((task) => {
    if (!categorized[task.category]) {
      categorized[task.category] = [];
    }
    categorized[task.category].push(task);
  });

  return categorized;
};

/**
 * Get a task by its ID
 */
export const getTaskById = (id: string): ProcessingTask | undefined => {
  return processingTasks.find((task) => task.id === id);
};
